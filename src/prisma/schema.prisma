generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN // The application admin
  JOB_SEEKER // The one looking for a job
  COMPANY_WORKER // This is a company worker who rejects and accepts applications and posts jpbs

  @@map("roles")
}

enum VerificationStatus {
  VERIFIED
  PENDING
  UNVERIFIED

  @@map("verification_status")
}

enum PasswordResetStatus {
  PENDING
  IDLE

  @@map("password_reset_status")
}

enum PaymentMethod {
  CASH
  MOMO
  CARD
  PAYPAL
  STRIPE

  @@map("payment_methods")
}

enum PaymentStatus {
  PAID
  UNPAID
  PENDING

  @@map("payment_status")
}

enum Qualification {
  PHD
  MASTERS
  BACHELORS
  DIPLOMA
  CERTIFICATE
  OTHER

  @@map("qualifications")
}

enum EmploymentStatus {
  EMPLOYED
  UNEMPLOYED

  @@map("employment_status")
}

enum Payrate {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY

  @@map("pay_rates")
}

enum JobType {
  FULLTIME
  PARTTIME
  CONTRACT
  INTERNSHIP
  TEMPORARY

  @@map("job_types")
}

enum JobStatus {
  ACTIVE
  INACTIVE

  @@map("job_status")
}

enum WorkEthic {
  REMOTE
  ONSITE
  HYBRID
  DOESNT_MATTER

  @@map("work_ethics")
}

enum JobApplicationStatus {
  PENDING
  INVITED
  REJECTED
  HIRED
  WITHDRAWN

  @@map("job_application_status")
}

enum Currency {
  RWF
  USD
  PLN
  EUR
  GBP

  @@map("currency")
}

model User {
  id                   String              @id @default(uuid())
  names                String
  email                String              @unique
  telephone            String?
  password             String
  profilePicture       File?               @relation(fields: [profilePictureId], references: [id])
  profilePictureId     String?             @map("profile_picture_id")
  role                 Role
  company              Company?            @relation(fields: [companyId], references: [id])
  verificationStatus   VerificationStatus  @default(UNVERIFIED) @map("verification_status")
  verificationCode     String?             @map("verification_code")
  verificationExpires  DateTime?           @map("verification_expires")
  passwordResetStatus  PasswordResetStatus @default(IDLE) @map("password_reset_status")
  passwordResetCode    String?             @map("password_reset_code")
  passwordResetExpires DateTime?           @map("password_reset_expires")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  profile              Profile?
  companyId            String?
  jobs                 Job[]

  @@map("users")
}

model Profile {
  id                   String            @id @default(uuid())
  user                 User              @relation(fields: [userId], references: [id])
  userId               String            @unique @map("user_id")
  highestQualification Qualification?    @map("highest_qualification")
  skills               Skill[]
  employmentStatus     EmploymentStatus? @map("employment_status")
  resume               File?             @relation(fields: [resumeId], references: [id])
  resumeId             String?
  workExperience       WorkExperience[]
  linkedIn             String?           @map("linked_in")
  github               String?
  twitter              String?
  facebook             String?
  portfolioWebsite     String?           @map("portfolio_website")
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")
  applications         Application[]
}

model WorkExperience {
  id          String   @id @default(uuid())
  company     String
  jobTitle    String   @map("job_title")
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  skills      Skill[] //Skills used at the position
  description String
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model Skill {
  id          String           @id @default(uuid())
  name        String
  profiles    Profile[] //Profiles with that skill
  experiences WorkExperience[] //Experiences with those skills
  jobs        Job[] // Jobs utilising the skill
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
}

model Company {
  id          String   @id @default(uuid())
  name        String
  email       String
  telephone   String
  location    String
  logo        File?    @relation(fields: [logoId], references: [id])
  logoId      String?  @map("logo_id")
  website     String?
  description String
  jobs        Job[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  workers     User[]
}

model Job {
  id                  String        @id @default(uuid())
  title               String
  description         String
  location            String
  salary              Int
  currency            Currency      @default(USD)
  payRate             Payrate       @map("pay_rate")
  company             Company       @relation(fields: [companyId], references: [id])
  skills              Skill[] //Skills required for the job
  benefits            Benefit[] //Job benefits
  applications        Application[] //Job applications
  applicationDeadline DateTime      @map("application_deadline")
  type                JobType       @map("job_type")
  companyId           String        @map("company_id")
  status              JobStatus     @default(ACTIVE)
  workEthic           WorkEthic     @map("work_ethic")
  category            Category?     @relation(fields: [categoryId], references: [id])
  categoryId          String?
  createdBy           User          @relation(fields: [createdById], references: [id])
  createdById         String
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  tags                Tag[] //Job tags
}

model Category {
  id        String   @id @default(uuid())
  name      String
  jobs      Job[] //Jobs in that category
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  color     String?
  jobs      Job[] //Jobs with that tag
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tags")
}

model Application {
  id          String               @id @default(uuid())
  profile     Profile              @relation(fields: [profileId], references: [id])
  profileId   String               @map("profile_id")
  job         Job                  @relation(fields: [jobId], references: [id])
  jobId       String               @map("job_id")
  status      JobApplicationStatus @default(PENDING)
  coverLetter String?              @map("cover_letter")
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
}

model Benefit {
  id        String   @id @default(uuid())
  name      String
  jobs      Job[] //Jobs with that benefit
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("benefits")
}

model Contact {
  id        String   @id @default(uuid())
  names     String
  email     String
  telephone String
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contacts")
}

model Faq {
  id        String   @id @default(uuid())
  question  String
  answer    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("faqs")
}

model File {
  id               String    @id @default(uuid())
  name             String
  originalName     String    @map("original_name")
  url              String
  type             String
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  users            User[]
  companies        Company[]
  profiles_resumes Profile[]

  @@map("files")
}
